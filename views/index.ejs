<!DOCTYPE html>
<html>

<head>
  <title>Task-Mate</title>
  <link rel="icon" href="/icon.png" type="image/x-icon" />
  <meta charset="UTF-8" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700;900&display=swap" rel="stylesheet" />
  <link href="https://getbootstrap.com/docs/5.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <script src="https://unpkg.com/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-TjQzSk8aVf4HWEdkKQ3rEj0ccfxSiSeB9qoVDtwL0TYR2jxHChnHtIv1Adzj+uKT"
    crossorigin="anonymous"></script>
  <script src="https://getbootstrap.com/docs/5.1/dist/js/bootstrap.min.js"
    integrity="sha384-4eS1FNSkTrB/fM9mzgPwpgqoqbpvfRMJ/0AjoRu2AnQ+Xq2yKvNo29bQZNMF9QEX"
    crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.4.0/css/all.css">
  <link rel="stylesheet" href="/main.css" />
</head>

<body>
  <header class="header-container">
    <div class="wrapper">
      <div class="logo">
        <img src="/icon.png" alt="" />
      </div>
      <ul class="nav-area">
        <li><a href="#">Home</a></li>

        <% if (status==="loggedIn" ) { %>

          <li><a href="/logout">Logout</a></li>
          <li><a href="/about">About</a></li>

          <% } else { %>

            <li><a href="/login">Login</a></li>
            <li> <a href="/register">Registration</a></li>


            <% } %>
      </ul>
    </div>
    <% if (status==="loggedIn" ) { %>
      <div class="welcome-text">
        <h1>
          <span>Task-Mate</span>
        </h1>
        <h2>
          <span> Hello, <span class="username">
              <%= user.name %>
            </span>! Boost Your Productivity with Task-Mate </span>
        </h2>
        <div class="body">
          <main class="table">
            <section class="table__header">
              <h1></h1>
            </section>
            <section class="table__body">
              <table>
                <thead>
                  <tr>
                    <th class="table-secondary1 text-center" style="padding: 20px;">Checkbox</th>
                    <th class="table-secondary2 text-center" style="padding: 20px;">Task Name</th>
                    <th class="table-secondary3 text-center" style="padding: 20px;">Task Description</th>
                    <th class="table-secondary4 text-center" style="padding: 20px;">Priority
                      <button type="button" class="sort" onclick="sortTaskPriority()"><i
                          class="fa-solid fa-sort"></i></button>
                    </th>
                    </th>
                    <th class="table-secondary5 text-center" style="padding: 20px;">Action</th>
                  </tr>
                </thead>
                <tbody id="results" style="box-shadow: none;">

                </tbody>
              </table>
            </section>
          </main>
        </div>


        <script>
          const results_body = document.querySelector('#results');
          const userId = "<%= user.id %>";
          load_data();

          function load_data() {
            const request = new XMLHttpRequest();
            request.open('GET', `/get_data?userId=${userId}`);
            let html = '';
            request.onreadystatechange = () => {
              if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {
                const results = JSON.parse(request.responseText);
                results.forEach(result => {
                  html += `
        <tr>
          <td class="text-center"><input type="checkbox" class ="chkbox" ${result.checkbox_state === 1 ? 'checked' : ''} onchange="updateCheckboxState(this, ${result.id})"></td>
          <td contenteditable class="text-center" onblur="update_data(this, 'task_name', '${result.id}')"
            data-toggle="tooltip"  data-placement="top" title="Click to edit">${result.task_name}</td>
          <td contenteditable  class="text-center" onblur="update_data(this, 'task_description', '${result.id}')"
            data-toggle="tooltip" data-placement="top" title="Click to edit">${result.task_description}</td>
          <td contenteditable  class="text-center" onblur="update_data(this, 'task_priority', '${result.id}')"
            data-toggle="tooltip" data-placement="top" title="Click to edit">${result.task_priority}</td>
          <td class="d-grid gap-2"><button type="button" class="btn btn-danger btn-sm ggg" onclick="delete_data(${result.id})">Remove</button></td>
        </tr>`;
                });
                html += `
      <tr>
        <td>New Task</td>
        <td>
          
      <input type="text" id="task_name_data" class="task_name_data ggp" placeholder="Enter task name">
    </td>
    <td>
      <input type="text" id="task_description_data" class="task_description_data ggp" placeholder="Enter Description">
    </td>
    <td>
      <input type="text" id="task_priority_data" class="task_priority_data ggp" placeholder="Enter Priority">
    </td>
        
        <td class="d-grid gap-2"><button type="button" class="btn btn-success btn-sm ggg" onclick="add_data()">Add</button></td>
      </tr>`;
                results_body.innerHTML = html;
              }
            };
            request.send();
          }
          function add_data() {
            const task_name = document.getElementById('task_name_data').value;
            const task_description = document.getElementById('task_description_data').value;
            const task_priority = document.getElementById('task_priority_data').value;
            const userId = "<%= user.id %>"; // Get the user ID from the template
            const param = `task_name=${task_name}&task_description=${task_description}&task_priority=${task_priority}&user_id=${userId}`; // Include user_id in the parameters
            const request = new XMLHttpRequest();
            request.open('POST', '/add_data', true);
            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            request.onreadystatechange = () => {
              if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {
                alert('Task added successfully. Keep up the good work!');
                load_data();
              }
            };
            request.send(param);
          }

          function update_data(element, variable_name, id) {
            const param = `variable_name=${variable_name}&variable_value=${element.innerText}&id=${id}`;
            const request = new XMLHttpRequest();
            request.open('POST', '/update_data', true);
            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            request.onreadystatechange = () => {
              if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {
                alert('Your task has been updated successfully!');
              }
            };
            request.send(param);
          }

          function delete_data(id) {
            if (confirm('Are you sure you want to remove it?')) {
              const param = `id=${id}`;
              const request = new XMLHttpRequest();
              request.open('POST', '/delete_data', true);
              request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
              request.onreadystatechange = () => {
                if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {
                  alert('Task deleted successfully!');
                  load_data();
                }
              };
              request.send(param);
            }
          }

          function updateCheckboxState(checkbox, id) {
            const state = checkbox.checked ? 1 : 0;
            const param = `checkbox_state=${state}&id=${id}`;
            const request = new XMLHttpRequest();
            request.open('POST', '/update_checkbox_state', true);
            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            request.onreadystatechange = () => {
              if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {
                if (checkbox.checked) {
                  alert('Congratulations on completing the task!');
                }
                else {
                  alert('Seems You Want To Undo This Task');
                }
              }
            };
            request.send(param);
          }

          function sortTaskPriority() {
            const table = document.querySelector('#results');
            const rows = Array.from(table.rows);
            // Separate the last row from the rest of the rows
            const lastRow = rows.pop();
            // Sort the remaining rows based on task priority
            rows.sort((a, b) => {
              const priorityA = a.cells[3].innerText.toLowerCase();
              const priorityB = b.cells[3].innerText.toLowerCase();
              return priorityA.localeCompare(priorityB, 'en', { numeric: true });
            });
            // Clear the table body
            table.innerHTML = '';
            // Append the sorted rows back to the table
            rows.forEach(row => {
              table.appendChild(row);
            });
            // Append the last row back to the table
            table.appendChild(lastRow);
          }

        </script>
        <% } else { %>
          <div class="welcome-text gg">
            <h1>
              <span>Task-Mate</span>
            </h1>
            <h2>
              <span>Stay organized and boost productivity with my intuitive To-Do List app.</span>
            </h2>
            <a href="/login">Login</a>
            <a href="/register">Registration</a>
          </div>
          <% } %>
  </header>

  <script>
    // Get the task table and header container elements
    const taskTable = document.querySelector('.body');
    const headerContainer = document.querySelector('.header-container');
  
    // Function to update the header background height
    function updateHeaderBackgroundHeight() {
      const tableHeight = taskTable.offsetHeight;
      headerContainer.style.minHeight = `calc(${tableHeight}px + 500px)`; // Adjust the 100px value based on your needs
    }
  
    // Call the function initially and on window resize
    updateHeaderBackgroundHeight();
    setInterval(updateHeaderBackgroundHeight, 1000); // Adjust the interval duration (in milliseconds) based on your needs
  </script>
  
  
</body>

</html>